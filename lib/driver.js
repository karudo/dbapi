// Generated by CoffeeScript 1.8.0
var Collection, Driver, promise;

Collection = require('./collection');

promise = require('./promise');

Driver = (function() {
  function Driver(driverObject, params) {
    var _ref;
    this.driverObject = driverObject;
    this.params = params;
    this.collections = {};
    this.Self = {};
    if ((_ref = this.driverObject.init) != null) {
      _ref.call(this);
    }
  }

  Driver.prototype.getCollection = function(url) {
    if (!this.collections[url]) {
      this.collections[url] = promise.resolve().then((function(_this) {
        return function() {
          var collectionSchema, urlArr;
          urlArr = url.split('#').map(function(v) {
            var name, query, _ref;
            _ref = v.split(':'), name = _ref[0], query = _ref[1];
            return {
              name: name,
              query: query
            };
          });
          collectionSchema = urlArr.reduce((function(curSchema, step) {
            var curStepParams, _ref;
            curStepParams = (_ref = curSchema.childs) != null ? _ref[step.name] : void 0;
            if (!curStepParams) {
              throw new Error("no childs " + step.name);
            }
            return curStepParams;
          }), {
            childs: _this.driverObject.schema
          });
          return new Collection(_this, collectionSchema, urlArr);
        };
      })(this));
      this.collections[url].caught((function(_this) {
        return function() {
          return delete _this.collections[url];
        };
      })(this));
    }
    return this.collections[url];
  };

  return Driver;

})();

module.exports = Driver;
