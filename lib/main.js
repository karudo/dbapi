// Generated by CoffeeScript 1.8.0
var Driver, Main, fs, join, promise, _;

fs = require('fs');

join = require('path').join;

promise = require('./promise');

_ = require('lodash');

Driver = require('./driver');

Main = (function() {
  function Main(config) {
    this.pastures = {};
    this.drivers = {};
    this.connections = {};
    if (config.pastures) {
      _.forEach(config.pastures, (function(_this) {
        return function(vars, id) {
          return _this.addPasture(id, vars);
        };
      })(this));
    }
  }

  Main.prototype.addPasture = function(id, vars) {
    return this.pastures[id] = vars;
  };

  Main.prototype.addDriver = function(code, driver) {
    return this.drivers[code] = driver;
  };

  Main.prototype.addDriversDir = function(driversDir) {
    var dirs;
    dirs = fs.readdirSync(driversDir);
    return dirs.forEach((function(_this) {
      return function(code) {
        var driver;
        driver = require(join(driversDir, code));
        return _this.addDriver(code, driver);
      };
    })(this));
  };

  Main.prototype.getConnection = function(pastureId) {
    var driverCode, driverInstance, driverObject, pasture;
    if (!this.pastures[pastureId]) {
      return promise.reject('no pasture');
    }
    if (!this.connections[pastureId]) {
      pasture = this.pastures[pastureId];
      driverCode = pasture.driver;
      driverObject = this.drivers[driverCode];
      driverInstance = new Driver(driverObject, pasture.params);
      this.connections[pastureId] = promise.resolve(driverInstance);
    }
    return this.connections[pastureId];
  };

  Main.prototype.getCollection = function(pastureId, collUrl) {
    return this.getConnection(pastureId).then(function(connection) {
      return connection.getCollection(collUrl);
    });
  };

  Main.prototype.execCollectionMethod = function(pastureId, collUrl, method, args) {
    return this.getCollection(pastureId, collUrl).then(function(collection) {
      return collection.execMethod(method, args);
    });
  };

  Main.getInstance = function(config) {
    var m;
    m = new Main(config);
    config.driversDir || (config.driversDir = join(__dirname, 'drivers'));
    m.addDriversDir(config.driversDir);
    return m;
  };

  return Main;

})();

module.exports = Main;
